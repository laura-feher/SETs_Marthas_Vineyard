---
title: "Aquinnah SETs"
subtitle: "Produced for Martha’s Vineyard Commission" 
date: "`r Sys.Date()`"
author:
  - name: Laura Feher
    affiliations: 
    - name: NPS NCBN I&M Network
format: html
toc: true 
code-fold: true
code-overflow: wrap
embed-resources: true
editor: visual
---

```{r Load packages}
#| message: false
#| warning: false
#| include: false

library(tidyverse)
library(readxl)
library(stringr)
library(cowplot)
library(SETrNCBN) # https://github.com/laura-feher/NCBN_SETr
```

## 1. Get measurement dates

```{r Get measurement dates}
#| message: false
#| warning: false

# Get measurement dates from the first row of the excel sheets
aq_dates <- map(
  seq(1, 3, by = 1),
  ~
    read_xlsx(
      here::here("data", "Aquinnah 2025-6-3.xlsx"),
      sheet = paste0("Sheet", .x),
      n_max = 1
    ) %>%
    pivot_longer(., cols = everything()) %>%
    filter(str_detect(str_to_sentence(value), "Measure")) %>%
    mutate(date_num = str_sub(name, 1, 5)) %>%
    pluck("date_num")
) %>%
  set_names(., c("GH-W", "GH-M", "GH-E"))
```

## 2. Load and transform pin heights

```{r}
#| message: false
#| warning: false

# Load and transform pin height data for each of the stations
aq_data <- map(
  seq(1, 3, by = 1),
  ~ read_xlsx( # load sheets 1-3
    here::here("data", "Aquinnah 2025-6-3.xlsx"),
    sheet = paste0("Sheet", .x),
    skip = 1, # skip first row
    n_max = 38 # ignore last rows with totals
  ) %>%
    select(-c(1)) %>%
    select(starts_with("Hole") | starts_with("Measure")) # select the pin position (aka Hole) and pin height columns
) %>%
  set_names(., c("GH-W", "GH-M", "GH-E")) %>% # set the station names
  map2(., aq_dates, ~ set_names(., c("pin_position", .y))) %>% # set the name of the pin position column to 'pin_position` and set the names of the pin height columns to their respective dates
  map( # fill in the SET arm direction column
    .,
    ~ .x %>%
      drop_na(.) %>%
      mutate(direction = c( 
        rep("a", 9), rep("b", 9), rep("c", 9), rep("d", 9)
      ))
    %>%
      pivot_longer( # pivot the pin position and pin height columns into long format
        .,
        cols = -c(pin_position, direction),
        names_to = "date",
        values_to = "pin_height"
      ) %>%
      mutate(
        pin_position = as.character(pin_position),
        date = as.Date(as.numeric(date), format = "%Y-%m-%d", origin = "1899-12-30"), # convert date numbers to date format
        pin_height = pin_height * 10, # convert to mm
        site = "Aquinnah" # set site name
      )
  ) %>%
  map2(., # create a column with the station name 
       names(.), 
       ~ .x %>% mutate(station = .y)) %>%
  map(., # re-arrange columns
      ~ .x %>%
        select(site, station, direction, pin_position, date, pin_height)) %>%
  map(., # exclude data from 2016 as per Dan's email
      ~ .x %>% filter(date > as.Date("2016-12-31")))

# fix switched directions at GH-E on 6/10/2022 as per Dan's email
aq_GH_E_b <- aq_data %>%
  pluck("GH-E") %>%
  filter(direction == "a" & date == as.Date("2022-06-10")) %>%
  mutate(direction = "b",
         pin_height_corrected = pin_height) %>%
  select(-pin_height)

aq_GH_E_a <- aq_data %>%
  pluck("GH-E")  %>%
  filter(direction == "b" & date == as.Date("2022-06-10")) %>%
  mutate(direction = "a",
         pin_height_corrected = pin_height) %>%
  select(-pin_height)

aq_data <- aq_data %>%
  modify_at("GH-E", ~ .x %>%
              left_join(., aq_GH_E_a, by = c("site", "station", "direction", "pin_position", "date")) %>%
              mutate(pin_height = if_else(!is.na(pin_height_corrected), pin_height_corrected, pin_height)) %>%
              select(-pin_height_corrected) %>%
              left_join(., aq_GH_E_b, by = c("site", "station", "direction", "pin_position", "date")) %>%
              mutate(pin_height = if_else(!is.na(pin_height_corrected), pin_height_corrected, pin_height)) %>%
              select(-pin_height_corrected))
```

## 3. Visual for QAQC of raw pin heights

First I did a quick plot of the raw pin height data as a visual gut-check to make sure all the values look reasonable.

```{r}
#| message: false
#| warning: false

# quick plot for a visual gut-check to make sure all pin height values look reasonable

aq_data %>%
  map2(., names(.), ~ .x %>%
        mutate(direction_name = paste0("Arm: ", direction)) %>%
        ggplot(., aes(x = date, y = pin_height)) +
        geom_point(aes(color = pin_position)) +
        facet_wrap(~direction_name) +
        labs(title = paste0("Aquinnah - ", .y),
             color = "Pin position") +
        xlab("Date") +
        ylab("Raw pin height (mm)"))
```

## 4. Calculate station-level cumulative change

```{r}
#| message: false
#| warning: false

aq_cumu_station <- aq_data %>%
  map(., ~.x %>% 
    group_by(site, station, direction, pin_position) %>%
    mutate(first_pin_height = pin_height[date == min(date[!is.na(pin_height)])]) %>%
    mutate(cumu = pin_height - first_pin_height) %>%
    ungroup() %>%
    group_by(site, station, direction, date) %>%
    summarise(mean_direction_cumu = mean(cumu, na.rm = TRUE)) %>%
    group_by(site, station, date) %>%
    summarise(mean_station_cumu = mean(mean_direction_cumu, na.rm = TRUE),
              se_station_cumu = sd(mean_direction_cumu)/sqrt(length(mean_direction_cumu))) %>%
    mutate(first_date = date[date == min(date[!is.na(mean_station_cumu)])],
           date_num = as.numeric(date - first_date)/365.25))
```

## 5. Calculate station-level linear rates of change

```{r}
#| message: false
#| warning: false

# linear models for each station
aq_linear_mod_station <- aq_cumu_station %>%
  map(., ~.x %>%
        nest(data = everything()) %>%
        mutate(lm_mod = map(data, ~lm(mean_station_cumu ~ date_num, data = .x)),
               lm_mod_summary = map(lm_mod, ~summary(.x)),
               rate = map_dbl(lm_mod, ~coefficients(.x)[['date_num']]),
               rate_se = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Std. Error']]),
               rate_p = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Pr(>|t|)']]),
               rate_r2 = map_dbl(lm_mod_summary, ~.$r.squared)))

# aq_linear_mod_station_formatted <- aq_linear_mod_station %>%
#   map2(., names(.), ~.x %>%
#          mutate(site = "Aquinnah",
#                 station = .y,
#                 linear_rate = format_rates(rate = rate, se = rate_se),
#                 R2 = format_r2(r2 = rate_r2),
#                 p_val = format_pval(p = rate_p)) %>%
#          select(station, linear_rate, R2, p_val)) 
# 
# aq_linear_mod_station_formatted %>%
#   bind_rows()
```

## 6. Plot station-level cumulative change & rates

```{r}
#| message: false
#| warning: false

plot_fun <- function(df, rates = NULL, subtitle = NULL) {
  rate_labs <- rates
  
  name_lab <- unique(df$station)
  
  ggplot(data = df, aes(x = date, y = mean_station_cumu)) +
    geom_point() +
    geom_errorbar(aes(x = date, ymin = mean_station_cumu - se_station_cumu, ymax = mean_station_cumu + se_station_cumu)) +
    stat_smooth(method = "lm") +
    geom_text(data = rates, aes(x = as.Date("2020-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
    labs(title = paste0("Aquinnah - ", name_lab),
         subtitle = subtitle) +
    ylab("Cumulative surface elevation change (mm)") +
    xlab("Date")
}

map2(aq_cumu_station, aq_linear_mod_station_formatted, ~plot_fun(df = .x, rates = .y))
```

## 7. Calculate site-level cumulative change

```{r}
#| message: false
#| warning: false  

aq_cumu_site <- aq_cumu_station %>% 
  bind_rows() %>%
  group_by(site, date) %>%
  summarise(mean_site_cumu = mean(mean_station_cumu, na.rm = TRUE), 
            se_site_cumu = sd(mean_station_cumu)/sqrt(length(mean_station_cumu))) %>%
  mutate(first_date = date[date == min(date[!is.na(mean_site_cumu)])],
         date_num = as.numeric(date - first_date)/365.25)
```

## 8. Calculate site-level linear rates of change

```{r}
# linear model 
aq_linear_mod_site <- aq_cumu_site %>%
        nest(data = everything()) %>%
        mutate(lm_mod = map(data, ~lm(mean_site_cumu ~ date_num, data = .x)),
               lm_mod_summary = map(lm_mod, ~summary(.x)),
               intc = map_dbl(lm_mod, ~coefficients(.)[["(Intercept)"]]),
               rate = map_dbl(lm_mod, ~coefficients(.x)[['date_num']]),
               rate_se = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Std. Error']]),
               rate_p = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Pr(>|t|)']]),
               rate_r2 = map_dbl(lm_mod_summary, ~.$r.squared))

aq_linear_mod_site_formatted <- aq_linear_mod_site %>%
  mutate(site = "Aquinnah",
         linear_rate = paste0(format_result_vals(rate), " ± ", format_result_vals(rate_se)),
         R2 = format_result_vals(rate_r2),
         p_val = case_when(rate_p > 0.05 ~ "ns",
            rate_p <= 0.05 & rate_p > 0.01 ~ "p < 0.05",
            rate_p <= 0.01 & rate_p > 0.001 ~ "p < 0.01",
            rate_p <= 0.001 ~ "p < 0.001"),
         R2_pval_plot = format_r2_pval_plot(rate, rate_se, rate_r2, rate_p)
) %>%
  select(-c(data, lm_mod, lm_mod_summary))

aq_linear_mod_site_formatted %>%
  select(site, linear_rate, R2, p_val) %>%
  bind_rows()
```

## 9. Plot site-level cumulative change & rates

```{r}
#| message: false
#| warning: false

ggplot(data = aq_cumu_site, aes(x = date, y = mean_site_cumu)) +
    geom_point() +
    geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu)) +
    stat_smooth(method = "lm") +
    geom_text(data = aq_linear_mod_site_formatted, aes(x = as.Date("2020-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
    labs(title = paste0("Aquinnah")) +
    ylab("Cumulative surface elevation change (mm)") +
    xlab("Date")
```

## 10. Plot long-term & recent SLR

```{r}
#| message: false
#| warning: false

whoi_slr <- readRDS(here::here("data", "woods_hole_slr.Rds"))

whoi_slr_line_long <- scale_slr_line(rate = whoi_slr$whoi_slr_long$slr_rate, int = aq_linear_mod_site$intc, first_date = first(aq_cumu_site$date))

whoi_slr_line_recent <- scale_slr_line(rate = whoi_slr$whoi_slr_recent$slr_rate, int = aq_linear_mod_site$intc, first_date = first(aq_cumu_site$date))


ggplot(data = aq_cumu_site, aes(x = date, y = mean_site_cumu))+
  geom_point() +
  geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu)) +
  stat_smooth(method = "lm") +
  geom_abline(aes(slope = whoi_slr_line_long$scaled_slope, intercept = whoi_slr_line_long$scaled_int)) +
  geom_abline(aes(slope = whoi_slr_line_recent$scaled_slope, intercept = whoi_slr_line_recent$scaled_int), color = "orange") +
  geom_abline(aes(slope = whoi_slr_int_high$scaled_slope, intercept = whoi_slr_int_high$scaled_int), color = "red") +
  geom_text(data = aq_linear_mod_site_formatted, aes(x = as.Date("2020-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
  labs(title = paste0("Aquinnah")) +
  ylab("Cumulative surface elevation change (mm)") +
  xlab("Date") 
```

## 11. Plot future SLR

```{r}

sysfonts::font_add_google("Didact Gothic")
showtext::showtext_auto()

whoi_future_slr <- readRDS(here::here("data", "woods_hole_future_slr.Rds"))

whoi_future_slr_lines <- whoi_future_slr$whoi_slr_future_rates %>%
  mutate(future_slr_lines = map(rsl_rate_mm_yr, ~scale_slr_line(rate = .x, int = aq_linear_mod_site$intc, first_date = first(aq_cumu_site$date)))) %>%
  select(scenario_name, future_slr_lines) %>%
  mutate(scaled_slope = map_dbl(future_slr_lines, ~.x$scaled_slope),
         scaled_int = map_dbl(future_slr_lines, ~.x$scaled_int))

ggplot(data = aq_cumu_site, aes(x = date, y = mean_site_cumu))+
  geom_point() +
  geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu)) +
  stat_smooth(method = "lm", formula = y ~ x) +
  geom_abline(data = whoi_future_slr_lines, aes(slope = scaled_slope, intercept = scaled_int, color = scenario_name)) +
  geom_text(data = aq_linear_mod_site_formatted, aes(x = as.Date("2020-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
  labs(title = paste0("Aquinnah")) +
  ylab("Cumulative surface elevation change (mm)") +
  xlab("Date") +
  theme(text = element_text(family = "Didact Gothic")) +
  theme_mv_sets()
```
