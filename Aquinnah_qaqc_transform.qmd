---
title: "Aquinnah SETs - QAQC & Transform"
subtitle: "Produced for Martha’s Vineyard Commission" 
date: "`r Sys.Date()`"
author:
  - name: Laura Feher
    affiliations: 
    - name: NPS NCBN I&M Network
format: html
toc: true 
code-fold: true
code-overflow: wrap
embed-resources: true
execute:
  message: false
  warning: false
editor: visual
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(readxl)
library(stringr)
library(cowplot)
library(showtext)
library(NPSETr) # https://github.com/laura-feher/NPSETr

source("C:/Users/lfeher/OneDrive - DOI/SETs_Marthas_Vineyard/R/format_mv_results.R", echo = TRUE)
```

## 1. Get measurement dates

```{r}
#| label: Get-measurement-dates

# Get measurement dates from the first row of the excel sheets
aq_dates <- map(
  seq(1, 3, by = 1),
  ~
    read_xlsx(
      here::here("data-raw", "Aquinnah 2025-6-3.xlsx"),
      sheet = paste0("Sheet", .x),
      n_max = 1
    ) %>%
    pivot_longer(., cols = everything()) %>%
    filter(str_detect(str_to_sentence(value), "Measure")) %>%
    mutate(date_num = str_sub(name, 1, 5)) %>%
    pluck("date_num")
) %>%
  set_names(., c("GH-W", "GH-M", "GH-E"))
```

## 2. Load and transform pin heights

```{r}
#| label: Load-and-transform-pin-heights

# Load and transform pin height data for each of the stations
aq_raw_data <- map(
  seq(1, 3, by = 1),
  ~ read_xlsx( # load sheets 1-3
    here::here("data-raw", "Aquinnah 2025-6-3.xlsx"),
    sheet = paste0("Sheet", .x),
    skip = 1, # skip first row
    n_max = 38 # ignore last rows with totals
  ) %>%
    select(-c(1)) %>%
    select(starts_with("Hole") | starts_with("Measure")) # select the pin position (aka Hole) and pin height columns
) %>%
  set_names(., c("GH-W", "GH-M", "GH-E")) %>% # set the station names
  map2(., aq_dates, ~ set_names(., c("pin_position", .y))) %>% # set the name of the pin position column to 'pin_position` and set the names of the pin height columns to their respective dates
  map( # fill in the SET arm direction column
    .,
    ~ .x %>%
      drop_na(.) %>%
      mutate(direction = c( 
        rep("a", 9), rep("b", 9), rep("c", 9), rep("d", 9)
      ))
    %>%
      pivot_longer( # pivot the pin position and pin height columns into long format
        .,
        cols = -c(pin_position, direction),
        names_to = "date",
        values_to = "pin_height"
      ) %>%
      mutate(
        pin_position = as.character(pin_position),
        date = as.Date(as.numeric(date), format = "%Y-%m-%d", origin = "1899-12-30"), # convert date numbers to date format
        pin_height = pin_height * 10, # convert to mm
        site = "Aquinnah" # set site name
      )
  ) %>%
  map2(., # create a column with the station name 
       names(.), 
       ~ .x %>% mutate(station = .y)) %>%
  map(., # re-arrange columns
      ~ .x %>%
        select(site, station, direction, pin_position, date, pin_height)) %>%
  map(., # exclude data from 2016 as per Dan's email
      ~ .x %>% filter(date > as.Date("2016-12-31")))

# fix switched directions at GH-E on 6/10/2022 as per Dan's email
aq_GH_E_b <- aq_raw_data %>%
  pluck("GH-E") %>%
  filter(direction == "a" & date == as.Date("2022-06-10")) %>%
  mutate(direction = "b",
         pin_height_corrected = pin_height) %>%
  select(-pin_height)

aq_GH_E_a <- aq_raw_data %>%
  pluck("GH-E")  %>%
  filter(direction == "b" & date == as.Date("2022-06-10")) %>%
  mutate(direction = "a",
         pin_height_corrected = pin_height) %>%
  select(-pin_height)

aq_raw_data <- aq_raw_data %>%
  modify_at("GH-E", ~ .x %>%
              left_join(., aq_GH_E_a, by = c("site", "station", "direction", "pin_position", "date")) %>%
              mutate(pin_height = if_else(!is.na(pin_height_corrected), pin_height_corrected, pin_height)) %>%
              select(-pin_height_corrected) %>%
              left_join(., aq_GH_E_b, by = c("site", "station", "direction", "pin_position", "date")) %>%
              mutate(pin_height = if_else(!is.na(pin_height_corrected), pin_height_corrected, pin_height)) %>%
              select(-pin_height_corrected))

rm(aq_GH_E_a, aq_GH_E_b)
```

## 3. Visual for QAQC of raw pin heights

First I did a quick plot of the raw pin height data as a visual gut-check to make sure all the values look reasonable.

```{r}
#| label: Visual-for-QAQC-of-raw-pin-heights

# quick plot for a visual gut-check to make sure all pin height values look reasonable

aq_raw_data %>%
  map2(., names(.), ~ .x %>%
        mutate(direction_name = paste0("Arm: ", direction)) %>%
        ggplot(., aes(x = date, y = pin_height)) +
        geom_point(aes(color = pin_position)) +
        facet_wrap(~direction_name) +
        labs(title = paste0("Aquinnah - ", .y),
             color = "Pin position") +
        xlab("Date") +
        ylab("Raw pin height (mm)"))
```

## 4. Calculate station-level cumulative change

```{r}
#| label: Calculate-station-level-cumulative-change

aq_cumu_station <- aq_raw_data %>%
  map(., ~.x %>% 
    group_by(site, station, direction, pin_position) %>%
    mutate(first_pin_height = pin_height[date == min(date[!is.na(pin_height)])]) %>%
    mutate(cumu = pin_height - first_pin_height) %>%
    ungroup() %>%
    group_by(site, station, direction, date) %>%
    summarise(mean_direction_cumu = mean(cumu, na.rm = TRUE)) %>%
    group_by(site, station, date) %>%
    summarise(mean_station_cumu = mean(mean_direction_cumu, na.rm = TRUE),
              se_station_cumu = sd(mean_direction_cumu)/sqrt(length(mean_direction_cumu))) %>%
    mutate(first_date = date[date == min(date[!is.na(mean_station_cumu)])],
           date_num = as.numeric(date - first_date)/365.25))
```

## 5. Calculate station-level linear rates of change

```{r}
#| label: Calculate-station-level-linear-rates-of-change

# linear models for each station
aq_linear_mod_station <- aq_cumu_station %>%
  map(., ~.x %>%
        group_by(site, station) %>%
        nest(data = -c(site, station)) %>%
        mutate(
          lm_mod = map(data, ~lm(mean_station_cumu ~ date_num, data = .x)),
          tidied = map(lm_mod, broom::tidy),
          glanced = map(lm_mod, broom::glance)
        ) %>%
        unnest(tidied, glanced) %>%
        mutate(
          linear_rate = paste0(
            format_result_vals(estimate),
            " ± ",
            format_result_vals(std.error)
          ),
          R2 = format_r2(adj.r.squared),
          p_val = format_pval(p.value)
        )
  )

aq_linear_mod_station %>%
  map(., ~ .x %>%
      filter(term == "date_num") %>%
      select(site, station, linear_rate, R2, p_val)
  ) %>%
  bind_rows()
```

## 6. Plot station-level cumulative change & rates

```{r}
#| label: Plot-station-level-cumulative-change-&-rates

map2(
  aq_cumu_station,
  aq_linear_mod_station,
  ~ ggplot(data = .x, aes(x = date, y = mean_station_cumu)) +
    geom_errorbar(
      aes(
        x = date,
        ymin = mean_station_cumu - se_station_cumu,
        ymax = mean_station_cumu + se_station_cumu
      )
    ) +
    geom_point() +
    geom_smooth(
      method = "lm",
      formula = y ~ x,
      fullrange = TRUE,
      se = TRUE
    ) +
    geom_text(
      data = .y %>%
        filter(term == "date_num"),
      aes(
        x = as.Date("2020-01-01"),
        y = Inf,
        label = paste0(
          "Rate: ",
          linear_rate,
          " mm/yr"
        )
      ),
      vjust = 1.5
    ) +
    geom_text(
      data = .y %>%
        filter(term == "date_num"),
      aes(
        x = as.Date("2020-01-01"),
        y = Inf,
        label = paste0("R2: ", R2, ", ", p_val)
      ),
      vjust = 3
    ) +
    labs(title = paste0(.x$site, " - ", .x$station)) +
    scale_x_date(
      date_breaks = "1 year",
      date_labels = "%Y",
      name = "Date"
    ) +
    scale_y_continuous(name = "Cumulative surface elevation change (mm)")
)
```

## 7. Calculate site-level cumulative change

```{r}
#| label: Calculate-site-level-cumulative-change

aq_cumu_site <- aq_cumu_station %>% 
  bind_rows() %>%
  group_by(site, date) %>%
  summarise(mean_site_cumu = mean(mean_station_cumu, na.rm = TRUE), 
            se_site_cumu = sd(mean_station_cumu)/sqrt(length(mean_station_cumu))) %>%
  mutate(first_date = date[date == min(date[!is.na(mean_site_cumu)])],
         date_num = as.numeric(date - first_date)/365.25)
```

## 8. Calculate site-level linear rates of change

```{r}
#| label: Calculate-site-level-linear-rates-of-change

# linear model 
aq_linear_mod_site <- aq_cumu_site %>%
  nest(data = -site) %>%
  mutate(lm_mod = map(data, ~lm(mean_site_cumu ~ date_num, data = .x)),
         tidied = map(lm_mod, broom::tidy),
         glanced = map(lm_mod, broom::glance)) %>%
  unnest(tidied, glanced) %>%
  mutate(linear_rate = paste0(format_result_vals(estimate), " ± ",  format_result_vals(std.error)),
          R2 = format_r2(adj.r.squared),
          p_val = format_pval(p.value))

aq_linear_mod_site %>%
  filter(term == "date_num") %>%
  select(site, linear_rate, R2, p_val)
```

## 9. Plot site-level cumulative change & rates

```{r}
#| label: Plot-site-level-cumulative-change-&-rates
#| fig.showtext: true

ggplot(data = aq_cumu_site, aes(x = date, y = mean_site_cumu)) +
    geom_errorbar(
      aes(
        x = date,
        ymin = mean_site_cumu - se_site_cumu,
        ymax = mean_site_cumu + se_site_cumu
      )
    ) +
    geom_point() +
    geom_smooth(
      method = "lm",
      formula = y ~ x,
      fullrange = TRUE,
      se = TRUE
    ) +
    geom_text(
      data = aq_linear_mod_site %>%
        filter(term == "date_num"),
      aes(
        x = as.Date("2020-01-01"),
        y = Inf,
        label = paste0(
          "Rate: ",
          linear_rate,
          " mm/yr"
        )
      ),
      vjust = 1.5
    ) +
    geom_text(
      data = aq_linear_mod_site %>%
        filter(term == "date_num"),
      aes(
        x = as.Date("2020-01-01"),
        y = Inf,
        label = paste0("R2: ", R2, ", ", p_val)
      ),
      vjust = 3
    ) +
    labs(title = "Aquinnah") +
    scale_x_date(
      date_breaks = "1 year",
      date_labels = "%Y",
      name = "Date"
    ) +
    scale_y_continuous(name = "Cumulative surface elevation change (mm)")
```

## 10. Plot long-term & recent SLR

```{r}
#| label: Plot-long-term-&-recent-SLR

whoi_slr <- readRDS(here::here("data", "woods_hole_slr.Rds"))

plot_fun_slr_current <- function(df, rates = NULL, base_size = 12, dark_text = "#1A242F") {
  
  mid_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[2]
  light_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[3]
  
  first_date <- first(df$date)
  last_date <- last(df$date)
  width <- .2 * (as.numeric(max(df$date)-min(df$date))/length(df$date))
  
  new_first_date <- data.frame(
    x = seq(first(aq_cumu_site$date)-200, last(aq_cumu_site$date)+200, by = 1)) %>%
  mutate(date_num = as.numeric(x - first(aq_cumu_site$date))/365.25,
         x2 = aq_linear_mod_site$intc + aq_linear_mod_site$rate * date_num) %>%
  summarise(new_first_date_num = first(x2),
            new_first_date = first(x)) 
  
  whoi_slr_line_long <- SETrNCBN::scale_slr_line(rate = whoi_slr$whoi_slr_long$slr_rate, int = new_first_date$new_first_date_num, first_date = new_first_date$new_first_date)
  
  whoi_slr_line_recent <- SETrNCBN::scale_slr_line(rate = whoi_slr$whoi_slr_recent$slr_rate, int = new_first_date$new_first_date_num, first_date = new_first_date$new_first_date)
  
  whoi_slr_line_future_intlow <- SETrNCBN::scale_slr_line(rate = whoi_slr$whoi_slr_future_rates$rsl_rate_mm_yr[whoi_slr$whoi_slr_future_rates$scenario_name == "int_low"], int = new_first_date$new_first_date_num, first_date = new_first_date$new_first_date)
  
  whoi_slr_line_future_int <- SETrNCBN::scale_slr_line(rate = whoi_slr$whoi_slr_future_rates$rsl_rate_mm_yr[whoi_slr$whoi_slr_future_rates$scenario_name == "int"], int = new_first_date$new_first_date_num, first_date = new_first_date$new_first_date)
  
  whoi_slr_line_future_inthigh <- SETrNCBN::scale_slr_line(rate = whoi_slr$whoi_slr_future_rates$rsl_rate_mm_yr[whoi_slr$whoi_slr_future_rates$scenario_name == "int_high"], int = new_first_date$new_first_date_num, first_date = new_first_date$new_first_date)
  
  lines <- list(whoi_slr_line_long, whoi_slr_line_recent, whoi_slr_line_future_intlow, whoi_slr_line_future_int, whoi_slr_line_future_inthigh) %>%
    bind_rows(., .id = "type") %>%
    mutate(type = case_when(type == 1 ~ "long-term SLR", 
                            type == 2 ~ "recent SLR",
                            type == 3 ~ "int-low",
                            type == 4 ~ "int",
                            type == 5 ~ "int-high"))

  slr_labs <- bind_rows(whoi_slr$whoi_slr_long_formatted, whoi_slr$whoi_slr_recent_formatted) %>% 
    mutate(slr_rate = case_when(!is.na(slr_rate_long) ~ slr_rate_long, 
                                !is.na(slr_rate_recent) ~ slr_rate_recent),
      type = case_when(!is.na(slr_rate_long) ~ "long-term SLR", 
                       !is.na(slr_rate_recent) ~ "recent SLR")) %>%
    select(-c(slr_rate_long, slr_rate_recent))
  
  if (rates$rate_p > 0.05) {
    eq <- substitute(
      expr = paste("Rate:  ", a, " ± ", b, " mm/yr; ", italic("r")^2, " = ", r2, ", ", italic("p"), " = ns"),
      env = list(a = format_result_vals(rates$rate), b = format_result_vals(rates$rate_se), r2 = format_r2(rates$rate_r2))
    )
  } else {
    eq <- substitute(
      expr = paste("Rate:  ", a, " ± ", b, " mm/yr; ", italic("r")^2, " = ", r2, ", ", italic("p"), " ", p_val),
      env = list(a = format_result_vals(rates$rate), b = format_result_vals(rates$rate_se), r2 = format_r2(rates$rate_r2), p_val = format_pval(rates$rate_p, output_type = "subtitle"))
    )
  }

  ggplot(data = df, aes(x = date, y = mean_site_cumu)) +
    geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu), width = width, color = "#333333") +
    geom_point(color = "#333333") +
    geom_smooth(aes(color = "SET"), method = "lm", formula = y ~ x, fullrange = TRUE, se = TRUE, linewidth = 0.6, color = "transparent") +
    geomtextpath::geom_textsmooth(aes(color = "SET", label = "SET"), method = "lm", formula = y ~ x, fullrange = TRUE, se = TRUE, hjust = 0.93) +
    geomtextpath::geom_textabline(data = lines, aes(slope = scaled_slope, intercept = scaled_int, label = type, color = type), hjust = 0.93) +
    annotate("text", x = structure(-Inf, class = "Date"), y = Inf, label = paste0("Long-term SLR: ", whoi_slr$whoi_slr_long_formatted$slr_rate_long), color = "#1B5570", vjust = 3, hjust = 0, family = "Lora") +
    annotate("text", x = structure(-Inf, class = "Date"), y = Inf, label = paste0("Recent SLR: ", whoi_slr$whoi_slr_recent_formatted$slr_rate_recent), color = "#17A4B6", vjust = 5, hjust = 0, family = "Lora") +

    labs(title = unique(df$site),
         subtitle = eq) +
    scale_color_manual(values = c("#1B5570", "#17A4B6", "yellow", "green", "red", "#333333")) +
    scale_x_date(expand = c(0,0), limits = c(first_date - 200, last_date + 200), date_breaks = "1 year", date_labels = "%Y") +
    scale_y_continuous(name = "Surface elevation change (mm)") +
    theme_minimal(base_size = base_size) +
    theme(text = element_text(colour = mid_text, family = "BrandonText", lineheight = 1.1),
          plot.title = element_text(family = "Lora", color = dark_text, size = rel(1.6), margin = margin(12, 0, 4, 0)),
          plot.subtitle = element_text(color = dark_text, family = "Lora", size = rel(1), margin = margin(4, 0, 2, 0), lineheight = 1.1),
          axis.text.y = element_text(colour = light_text, size = rel(0.9)),
          axis.title.y = element_text(color = mid_text, size = base_size, margin = margin(0, 4, 0, 0)),
          axis.text.x = element_text(colour = mid_text, size = base_size),
          axis.title.x = element_blank(),
          legend.position = "none",
          legend.justification = 1,
          panel.grid = element_line(colour = "#E8E7E7"),
          plot.background = element_rect(fill = "#F7F7F7"),
          plot.caption = element_text(size = rel(0.8), margin = margin(8, 0, 0, 0)),
          plot.margin = margin(0.25, 0.25, 0.25, 0.25,"cm")) 
}

plot_fun_slr_current(df = aq_cumu_site, rates = aq_linear_mod_site)
```

## 11. Plot future SLR

```{r}
#| label: Plot-future-SLR
sysfonts::font_add_google("Didact Gothic")
showtext::showtext_auto()

whoi_future_slr <- readRDS(here::here("data", "woods_hole_future_slr.Rds"))

whoi_future_slr_lines <- whoi_future_slr$whoi_slr_future_rates %>%
  mutate(future_slr_lines = map(rsl_rate_mm_yr, ~scale_slr_line(rate = .x, int = aq_linear_mod_site$intc, first_date = first(aq_cumu_site$date)))) %>%
  select(scenario_name, future_slr_lines) %>%
  mutate(scaled_slope = map_dbl(future_slr_lines, ~.x$scaled_slope),
         scaled_int = map_dbl(future_slr_lines, ~.x$scaled_int))

ggplot(data = aq_cumu_site, aes(x = date, y = mean_site_cumu))+
  geom_point() +
  geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu)) +
  stat_smooth(method = "lm", formula = y ~ x) +
  geom_abline(data = whoi_future_slr_lines, aes(slope = scaled_slope, intercept = scaled_int, color = scenario_name)) +
  geom_text(data = aq_linear_mod_site_formatted, aes(x = as.Date("2020-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
  labs(title = paste0("Aquinnah")) +
  ylab("Cumulative surface elevation change (mm)") +
  xlab("Date") +
  theme(text = element_text(family = "Didact Gothic")) +
  theme_mv_sets()
```
