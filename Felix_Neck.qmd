---
title: "Felix Neck SETs"
subtitle: "Produced for Martha’s Vineyard Commission" 
date: "`r Sys.Date()`"
author:
  - name: Laura Feher
    affiliations: 
    - name: NPS NCBN I&M Network
format: html
toc: true 
code-fold: true
code-overflow: wrap
embed-resources: true
editor: visual
---

```{r Load packages}
#| message: false
#| warning: false
#| include: false

library(tidyverse)
library(readxl)
library(stringr)
library(mgcv)
library(gratia)
```

## 1. Get measurement dates

```{r Get measurement dates}
#| message: false
#| warning: false

# Get measurement dates from the first row of the excel sheets
fn_dates <- map(
  seq(1, 3, by = 1),
  ~
    read_xlsx(
      here::here("data", "Felix Neck 2025-5-15.xlsx"),
      sheet = paste0("Sheet", .x),
      n_max = 1
    ) %>%
    pivot_longer(., cols = everything()) %>%
    filter(str_detect(str_to_sentence(value), "Measure")) %>%
    mutate(date_num = str_sub(name, 1, 5)) %>%
    pluck("date_num")
) %>%
  set_names(., c("FN-NW", "FN-M", "FN-SE"))
```

## 2. Load and transform pin heights

```{r}
#| message: false
#| warning: false

# Load and transform pin height data for each of the stations
fn_data_raw <- map(
  seq(1, 3, by = 1),
  ~ read_xlsx( # load sheets 1-3
    here::here("data", "Felix Neck 2025-5-15.xlsx"),
    sheet = paste0("Sheet", .x),
    skip = 1, # skip first row
    n_max = 38 # ignore last rows with totals
  ) %>%
    select(-c(1)) %>%
    select(starts_with("Hole") | starts_with("Measure")) # select the pin position (aka Hole) and pin height columns
) %>%
  set_names(., c("FN-NW", "FN-M", "FN-SE")) %>% # set the station names
  map2(., fn_dates, ~ set_names(., c("pin_position", .y))) %>% # set the name of the pin position column to 'pin_position` and set the names of the pin height columns to their respective dates
  map( # fill in the SET arm direction column
    .,
    ~ .x %>%
      drop_na(.) %>%
      mutate(direction = c( 
        rep("a", 9), rep("b", 9), rep("c", 9), rep("d", 9)
      ))
    %>%
      pivot_longer( # pivot the pin position and pin height columns into long format
        .,
        cols = -c(pin_position, direction),
        names_to = "date",
        values_to = "pin_height"
      ) %>%
      mutate(
        pin_position = as.character(pin_position),
        date = as.Date(as.numeric(date), format = "%Y-%m-%d", origin = "1899-12-30"), # convert date numbers to date format
        pin_height = pin_height * 10, # convert to mm
        site = "Felix Neck" # set site name
      )
  ) %>%
  map2(., # create a column with the station name 
       names(.), 
       ~ .x %>% mutate(station = .y)) %>%
  map(., # re-arrange columns
      ~ .x %>%
        select(site, station, direction, pin_position, date, pin_height))
```

## 3. Visual for QAQC of raw pin heights

First I did a quick plot of the raw pin height data as a visual gut-check to make sure all the values look reasonable.

```{r}
#| message: false
#| warning: false

# quick plot for a visual gut-check to make sure all pin height values look reasonable

fn_data_raw %>%
  map2(., names(.), ~ .x %>%
        mutate(direction_name = paste0("Arm: ", direction)) %>%
        ggplot(., aes(x = date, y = pin_height)) +
        geom_point(aes(color = pin_position)) +
        facet_wrap(~direction_name) +
        labs(title = paste0("Felix Neck - ", .y),
             color = "Pin position") +
        xlab("Date") +
        ylab("Raw pin height (mm)"))
```

::: callout-caution
For station FN-SE, arm R5-W, pin 7 on 6/15/2021 - the pin height was recorded as "81" cm (810 mm) but I think it should probably 8.1 cm (81 mm). I'll correct it before calculating cumulative change in the next step
:::

### 3b. Correct pin issue and re-plot raw pin heights

```{r}
fn_data <- fn_data_raw %>%
  map(., ~.x %>%
        mutate(pin_height = if_else(station == "FN-SE" & direction == "b" & pin_position == "7" & date == as.Date("2021-06-15"), pin_height/10, pin_height)))

fn_data %>%
  map2(., names(.), ~ .x %>%
        mutate(direction_name = paste0("Arm: ", direction)) %>%
        ggplot(., aes(x = date, y = pin_height)) +
        geom_point(aes(color = pin_position)) +
        facet_wrap(~direction_name) +
        labs(title = paste0("Felix Neck - ", .y),
             color = "Pin position") +
        xlab("Date") +
        ylab("Raw pin height (mm)"))
```

## 4. Calculate station-level cumulative change

```{r}
#| message: false
#| warning: false

fn_cumu_station <- fn_data %>%
  map(., ~.x %>% 
    group_by(site, station, direction, pin_position) %>%
    mutate(first_pin_height = pin_height[date == min(date[!is.na(pin_height)])]) %>%
    mutate(cumu = pin_height - first_pin_height) %>%
    ungroup() %>%
    group_by(site, station, direction, date) %>%
    summarise(mean_direction_cumu = mean(cumu, na.rm = TRUE)) %>%
    group_by(site, station, date) %>%
    summarise(mean_station_cumu = mean(mean_direction_cumu, na.rm = TRUE),
              se_station_cumu = sd(mean_direction_cumu)/sqrt(length(mean_direction_cumu))) %>%
    mutate(first_date = date[date == min(date[!is.na(mean_station_cumu)])],
           date_num = as.numeric(date - first_date)/365.25))
```

## 5. Calculate station-level linear rates of change

```{r}
#| message: false
#| warning: false

# linear models 
fn_linear_mod_station <- fn_cumu_station %>%
  map(., ~.x %>%
        nest(data = everything()) %>%
        mutate(lm_mod = map(data, ~lm(mean_station_cumu ~ date_num, data = .x)),
               lm_mod_summary = map(lm_mod, ~summary(.x)),
               rate = map_dbl(lm_mod, ~coefficients(.x)[['date_num']]),
               rate_se = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Std. Error']]),
               rate_p = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Pr(>|t|)']]),
               rate_r2 = map_dbl(lm_mod_summary, ~.$r.squared)))

fn_linear_mod_station_formatted <- fn_linear_mod_station %>%
  map2(., names(.), ~.x %>%
         mutate(site = "Felix Neck",
                station = .y,
                linear_rate = paste0(round(rate, 2), " mm/yr"),
                SE = paste0("± ", round(rate_se, 2)),
                R2 = format(round(rate_r2, 2), nsmall = 2),
                p_val = format(rate_p, digits = 1)) %>%
         select(station, linear_rate, SE, R2, p_val)) 

fn_linear_mod_station_formatted %>%
  bind_rows()
```

## 6. Plot station-level cumulative change & rates

```{r}
#| message: false
#| warning: false

plot_fun <- function(df, rates = NULL, subtitle = NULL) {
  rate_labs <- rates
  
  name_lab <- unique(df$station)
  
  ggplot(data = df, aes(x = date, y = mean_station_cumu)) +
    geom_point() +
    geom_errorbar(aes(x = date, ymin = mean_station_cumu - se_station_cumu, ymax = mean_station_cumu + se_station_cumu)) +
    stat_smooth(method = "lm") +
    geom_text(data = rates, aes(x = as.Date("2017-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
    labs(title = paste0("Felix Neck - ", name_lab),
         subtitle = subtitle) +
    ylab("Cumulative surface elevation change (mm)") +
    xlab("Date")
}

map2(fn_cumu_station, fn_linear_mod_station_formatted, ~plot_fun(df = .x, rates = .y))
```

## 7. Calculate site-level cumulative change

```{r}
#| message: false
#| warning: false

fn_cumu_site <- fn_cumu_station %>%
  bind_rows() %>% 
  group_by(site, date) %>%
  summarise(mean_site_cumu = mean(mean_station_cumu, na.rm = TRUE),
            se_site_cumu = sd(mean_station_cumu)/sqrt(length(mean_station_cumu))) %>%
  mutate(first_date = date[date == min(date[!is.na(mean_site_cumu)])],
         date_num = as.numeric(date - first_date)/365.25)
```

## 8. Calculate site-level linear rates of change

```{r}

# linear model 
fn_linear_mod_site <- fn_cumu_site %>%
        nest(data = everything()) %>%
        mutate(lm_mod = map(data, ~lm(mean_site_cumu ~ date_num, data = .x)),
               lm_mod_summary = map(lm_mod, ~summary(.x)),
               rate = map_dbl(lm_mod, ~coefficients(.x)[['date_num']]),
               rate_se = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Std. Error']]),
               rate_p = map_dbl(lm_mod_summary, ~.$coefficients[['date_num', 'Pr(>|t|)']]),
               rate_r2 = map_dbl(lm_mod_summary, ~.$r.squared))

fn_linear_mod_site_formatted <- fn_linear_mod_site %>%
         mutate(site = "Felix Neck",
                linear_rate = paste0(round(rate, 2), " mm/yr"),
                SE = paste0("± ", round(rate_se, 2)),
                R2 = format(round(rate_r2, 2), nsmall = 2),
                p_val = format(rate_p, digits = 1)) %>%
         select(site, linear_rate, SE, R2, p_val)

fn_linear_mod_site_formatted %>%
  bind_rows()
```

## 9. Plot site-level cumulative change & rates

```{r}
#| message: false
#| warning: false

ggplot(data = fn_cumu_site, aes(x = date, y = mean_site_cumu)) +
    geom_point() +
    geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu)) +
    stat_smooth(method = "lm") +
    geom_text(data = fn_linear_mod_site_formatted, aes(x = as.Date("2017-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
    labs(title = paste0("Felix Neck")) +
    ylab("Cumulative surface elevation change (mm)") +
    xlab("Date")
```

## 10. Get SLR data from the Woods Hole NOAA gauge

```{r}
#| message: false
#| warning: false

whoi_slr_data <- as.data.frame(readr::read_csv("https://tidesandcurrents.noaa.gov/sltrends/data/8447930_meantrend.csv", skip = 5, show_col_types = FALSE)) %>%
  mutate(date = as.Date(paste0(Month, "/", "1/", Year), format = "%m/%d/%Y")) %>%
  mutate(min_date = min(date),
         yr = as.numeric(date - min_date)/365.25,
         Monthly_MSL_m = Monthly_MSL, # rename this column to make it obvious that this is meters
         Monthly_MSL_mm = Monthly_MSL*1000) %>% # convert to millimeters for comparisons to SET/MH data
  select(-Monthly_MSL)
```

## 11. Calculate long-term SLR

```{r}
#| message: false
#| warning: false
whoi_slr_long <- whoi_slr_data %>%
        tidyr::nest(data = everything(.)) %>%
        mutate(model = map(data, ~lm(Monthly_MSL_mm ~ yr, data = .x)),
               model_summary = map(model, ~summary(.x)),
               slr_rate = map_dbl(model, ~coefficients(.x)[['yr']]),
               slr_intc = map_dbl(model, ~coefficients(.x)[['(Intercept)']]),
               slr_rate_se = map_dbl(model_summary, ~.x$coefficients[['yr', 'Std. Error']]),
               cis = map(model, ~confint(.x)),
               lower_ci = map_dbl(cis, ~.x[['yr', '2.5 %']]),
               upper_ci = map_dbl(cis, ~.x[['yr', '97.5 %']]),
               min_date = as.Date(unlist(map(data, ~min(.x$date)))),
               max_date = as.Date(unlist(map(data, ~max(.x$date)))),
               model_date_x = map(data, ~lm(Monthly_MSL_mm ~ date, data = .x)),
               slope_date_x = map_dbl(model_date_x, ~coefficients(.x)[['date']]),
               int_date_x = map_dbl(model_date_x, ~coefficients(.x)[['(Intercept)']])) #%>%
        # select(model, model_summary, slr_rate, slr_intc, slr_rate_se, lower_ci, upper_ci, min_date, max_date)

whoi_slr_long_formatted <- whoi_slr_long %>%
         mutate(gauge = "Woods Hole, MA (8447930)",
                slr_rate_long = paste0(round(slr_rate, 2), " mm/yr"),
                SE = paste0("± ", round(slr_rate_se, 2))) %>%
         select(gauge, slr_rate_long, SE, min_date, max_date)

whoi_slr_long_formatted %>%
  select(-gauge)
```

## 12. Calculate recent SLR

```{r}
#| message: false
#| warning: false
whoi_slr_recent <- whoi_slr_data %>%
  filter(date >= as.Date("2001-01-01") & date <= as.Date("2019-12-31")) %>%
        tidyr::nest(data = everything(.)) %>%
        mutate(model = map(data, ~lm(Monthly_MSL_mm ~ yr, data = .x)),
               model_summary = map(model, ~summary(.x)),
               slr_rate = map_dbl(model, ~coefficients(.x)[['yr']]),
               slr_intc = map_dbl(model, ~coefficients(.x)[['(Intercept)']]),
               slr_rate_se = map_dbl(model_summary, ~.x$coefficients[['yr', 'Std. Error']]),
               cis = map(model, ~confint(.x)),
               lower_ci = map_dbl(cis, ~.x[['yr', '2.5 %']]),
               upper_ci = map_dbl(cis, ~.x[['yr', '97.5 %']]),
               min_date = as.Date(unlist(map(data, ~min(.x$date)))),
               max_date = as.Date(unlist(map(data, ~max(.x$date))))) %>%
        select(model, model_summary, slr_rate, slr_intc, slr_rate_se, lower_ci, upper_ci, min_date, max_date)

whoi_slr_recent_formatted <- whoi_slr_recent %>%
         mutate(gauge = "Woods Hole, MA (8447930)",
                slr_rate_recent = paste0(round(slr_rate, 2), " mm/yr"),
                SE = paste0("± ", round(slr_rate_se, 2))) %>%
         select(gauge, slr_rate_recent, SE, min_date, max_date)

whoi_slr_recent_formatted %>%
  select(-gauge)
```

## 13. Surface elevation change vs. SLR

```{r}
#| message: false
#| warning: false

num_of_days = as.numeric(difftime(max(whoi_slr_data$date), min(whoi_slr_data$date)), unit = "days")
slope = whoi_slr_long$slope_date_x / num_of_days
intc = whoi_slr_long$int_date_x - slope*min(as.numeric(whoi_slr_data$date))

ggplot(data = fn_cumu_site, aes(x = date, y = mean_site_cumu)) +
    geom_point() +
    geom_errorbar(aes(x = date, ymin = mean_site_cumu - se_site_cumu, ymax = mean_site_cumu + se_site_cumu)) +
    stat_smooth(method = "lm") +
  geom_abline(aes(slope = slope, intercept = intc), inherit.aes = F) +
    geom_text(data = fn_linear_mod_site_formatted, aes(x = as.Date("2017-01-01"), y = Inf, label = paste0("Rate: ", linear_rate, " (", SE, ")\n", "R2: ", R2, ", p: ", p_val)), vjust = 1.5) +
    labs(title = paste0("Felix Neck")) +
    ylab("Cumulative surface elevation change (mm)") +
    xlab("Date")
```
